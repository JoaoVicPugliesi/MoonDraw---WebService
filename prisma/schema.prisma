// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  client
  admin
}

enum Status {
  pendent
  completed
  canceled
}

model User {
  id                Int           @default(autoincrement())
  public_id         String        @id
  name              String
  surname           String
  email             String        @unique
  password          String
  role              Role          @default(client)
  is_active         Boolean       @default(false)
  created_at        DateTime      @default(now())
  email_verified_at DateTime?
  refreshToken      RefreshToken?
  cart              Cart?
  purchases         Purchase[]

  @@index([email, public_id])
  @@map("users")
}

model RefreshToken {
  id         Int    @default(autoincrement())
  public_id  String @id
  expires_in Int
  user       User   @relation(fields: [user_id], references: [public_id], onDelete: Cascade)
  user_id    String @unique

  @@map("refresh_tokens")
}

model Product {
  id           Int                      @default(autoincrement())
  public_id    String                   @id
  image_id     String
  name         String
  description  String                   @default("No Description")
  price        Float                    @default(0)
  supply       Int                      @default(0)
  publisher    String
  published_at DateTime                 @default(now())
  carts        Pivot_Cart_Product[]
  purchases    Pivot_Purchase_Product[]

  @@index([name, public_id])
  @@map("products")
}

model Cart {
  id        Int                  @default(autoincrement())
  public_id String               @id
  user_id   String               @unique
  user      User                 @relation(fields: [user_id], references: [public_id], onDelete: Cascade)
  products  Pivot_Cart_Product[]

  @@map("carts")
}

model Purchase {
  id        Int                      @default(autoincrement())
  public_id String                   @id
  user_id   String
  value     Float
  status    Status                   @default(pendent)
  user      User                     @relation(fields: [user_id], references: [public_id], onDelete: Cascade)
  products  Pivot_Purchase_Product[]

  @@map("purchases")
}

model Pivot_Cart_Product {
  cart_id    String
  product_id String

  cart    Cart    @relation(fields: [cart_id], references: [public_id], onDelete: Cascade)
  product Product @relation(fields: [product_id], references: [public_id])

  @@id([cart_id, product_id])
  @@map("pivot_carts_products")
}

model Pivot_Purchase_Product {
  purchase_id String
  product_id  String
  quantity    Int

  purchase Purchase @relation(fields: [purchase_id], references: [public_id], onDelete: Cascade)
  product  Product  @relation(fields: [product_id], references: [public_id])

  @@id([purchase_id, product_id])
  @@map("pivot_purchases_products")
}
