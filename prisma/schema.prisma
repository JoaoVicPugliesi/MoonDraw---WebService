// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Buyer
  Artist
  Admin
}

enum PurchaseStatus {
  Pending
  Completed
}

enum DeliveryStatus {
  Processing
  Delivering
  Delivered
}

model User {
  id                Int           @default(autoincrement())
  public_id         String        @id
  icon_id           String        @unique
  name              String
  surname           String
  email             String        @unique
  description       String        @default("No Description")
  password          String
  role              Role
  is_email_verified       Boolean       @default(false)
  created_at        DateTime      @default(now())
  last_login_at     DateTime      @default(now())
  email_verified_at DateTime?
  refreshToken      RefreshToken?
  cart              Cart?
  products          Product[]
  purchases         Purchase[]
  deliveries        Delivery[]

  @@index([email, public_id])
  @@map("users")
}

model RefreshToken {
  id         Int    @default(autoincrement())
  public_id  String @id
  expires_in Int
  owner      User   @relation(fields: [owner_id], references: [public_id], onDelete: Cascade)
  owner_id   String @unique

  @@map("refresh_tokens")
}

model Cart {
  id        Int    @default(autoincrement())
  public_id String @id
  owner_id  String @unique
  owner     User   @relation(fields: [owner_id], references: [public_id], onDelete: Cascade)
  products  Cart_Product_Pivot[]
  @@map("carts")
}

model Product {
  id           Int      @default(autoincrement())
  public_id    String   @id
  images_id    String[] @unique
  artist_id    String   @unique
  name         String   @unique
  description  String   @default("No Description")
  price        Float    @default(0)
  supply       Int      @default(0)
  publisher    String
  published_at DateTime @default(now())
  updated_at   DateTime @default(now())
  artist       User     @relation(fields: [artist_id], references: [public_id], onDelete: Cascade)
  carts        Cart_Product_Pivot[]
  purchases    Purchase_Product_Pivot[]
  @@index([name, public_id, artist_id])
  @@map("products")
}

model Purchase {
  id             Int            @default(autoincrement())
  public_id      String         @id
  buyer_id       String
  title          String
  value          Float
  status         PurchaseStatus @default(Pending)
  created_at     DateTime       @default(now())
  updated_at     DateTime       @default(now())
  completed_at   DateTime?
  payment_method String?
  buyer          User           @relation(fields: [buyer_id], references: [public_id], onDelete: Cascade)
  products       Purchase_Product_Pivot[]
  @@map("purchases")
}

model Delivery {
  id                    Int            @default(autoincrement())
  public_id             String         @id
  buyer_id              String         @unique
  purchase_id           String         @unique
  status                DeliveryStatus @default(Processing)
  recipient_name        String
  recipient_email       String
  recipient_phone       String?
  country               String
  state                 String
  city                  String
  neighborhood          String?
  address_line1         String
  address_line2         String?
  postal_code           String
  created_at            DateTime       @default(now())
  updated_at            DateTime       @default(now())
  tracking_number       String?
  carrier               String?
  tracking_url          String?
  delivery_instructions Json?
  delivered_at          DateTime?
  buyer                 User           @relation(fields: [buyer_id], references: [public_id])

  @@map("deliveries")
}

model Cart_Product_Pivot {
  cart_id    String
  product_id String

  cart    Cart    @relation(fields: [cart_id], references: [public_id], onDelete: Cascade)
  product Product @relation(fields: [product_id], references: [public_id])

  @@id([cart_id, product_id])
  @@map("carts_products_pivot")
}

model Purchase_Product_Pivot {
  purchase_id String
  product_id  String
  quantity    Int

  purchase Purchase @relation(fields: [purchase_id], references: [public_id], onDelete: Cascade)
  product  Product  @relation(fields: [product_id], references: [public_id])

  @@id([purchase_id, product_id])
  @@map("purchases_products_pivot")
}
